{"version":3,"sources":["Components/FooterComponent/index.js","Components/HeaderComponent/index.js","Components/BookComponent/index.js","Components/BookShelf/index.js","BooksAPI.js","Components/HomeComponent/index.js","Components/SearchComponent/index.js","Page.js","App.js","reportWebVitals.js","index.js"],"names":["Footer","class","target","rel","href","Header","className","Book","props","book","onShelfChange","index","shelf","imageLinks","title","authors","style","width","height","backgroundImage","smallThumbnail","value","onChange","e","disabled","map","author","Shelf","books","id","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","update","method","body","JSON","stringify","search","query","getAllBooks","a","orderedBooks","currentlyReading","filter","wantToRead","read","Home","useState","setOrderedBooks","updateBookCollections","useCallback","ordBooks","useEffect","BookShelf","to","updateResultSearch","result","updated","shelves","forEach","rowBook","index2","Search","setQuery","setResult","error","getSearchResults","onUserInput","prevResult","updatedResult","type","placeholder","Page","exact","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.851f162d.chunk.js","sourcesContent":["/**\n * Footer component\n * It represents static footer with a link to project repository\n */\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n      <small>\n        Full Source Code of This Project Con be found at {' '}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://github.com/ahmedalima/my-reads-a-book-tracking-app\">\n          Here\n        </a>\n      </small>\n    </div>\n  );\n}\n\nexport default Footer;\n","/**\n * Header component\n * It represents static header with title\n */\n\nconst Header = () => {\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Header;\n","/**\n * Book Static component\n * It displays a book details\n */\n\nimport PropTypes from 'prop-types';\n\nconst Book = (props) => {\n  const {\n    book,\n    onShelfChange,\n    index,\n  } = props;\n\n  const {\n    shelf, imageLinks, title, authors,\n  } = book;\n\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div className=\"book-cover\" style={{\n          width: 128,\n          height: 193,\n          backgroundImage: `url(\"${imageLinks && imageLinks.smallThumbnail}\")`\n        }}></div>\n        <div className=\"book-shelf-changer\">\n          <select value={shelf || 'none'} onChange={(e) => onShelfChange(e, book, index)}>\n            <option value=\"move\" disabled>Move to...</option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">\n        {title}\n      </div>\n      {authors\n        && authors.map((author) => (\n          <div className=\"book-authors\" key={author}>\n            {author}\n          </div>\n        ))}\n    </div>)\n}\n\nexport default Book;\n\nBook.propTypes = {\n  book: PropTypes.object,\n  onShelfChange: PropTypes.func,\n  index: PropTypes.number,\n}","/**\n * Static BookShelf Component\n */\nimport PropTypes from 'prop-types';\nimport Book from '../BookComponent';\n\nconst Shelf = (props) => {\n  const {\n    title, books, onShelfChange,\n  } = props;\n\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">\n        {title}\n      </h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {\n            books\n            && books.map((book) => (\n              <li key={book.id}>\n                <Book book={book} key={book.id} onShelfChange={onShelfChange} />\n              </li>))\n          }\n        </ol>\n      </div>\n    </div>)\n}\n\nexport default Shelf;\n\nShelf.propTypes = {\n  title: PropTypes.string,\n  books: PropTypes.array,\n  onShelfChange: PropTypes.func,\n};\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","/**\n * Main Page Component\n * It Displays Different shelves of books\n * Each shelve contains a list of books\n * User can Change/remove any book from a shelve\n */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport BookShelf from '../BookShelf';\nimport {\n  getAll, update,\n} from '../../BooksAPI';\n\nconst getAllBooks = async () => {\n  /**\n   * Get All User books from the back-end\n   * return => Object of properties:\n   *    currentlyReading: Array of Objects,\n   *       each object represents a book object with shelf property \"currentlyReading\"\n   *    wantToRead: Array of Object,\n   *       each object represents a book object with shelf property \"wantToRead\"\n   *    read: Array of Object,\n   *       each object represents a book object with shelf property \"read\"\n   */\n  const books = await getAll();\n  const orderedBooks = {\n    currentlyReading: books.filter((book) => book.shelf === 'currentlyReading'),\n    wantToRead: books.filter((book) => book.shelf === 'wantToRead'),\n    read: books.filter((book) => book.shelf === 'read')\n  };\n  return orderedBooks;\n}\n\nconst Home = () => {\n  const [orderedBooks, setOrderedBooks] = useState({});\n\n  const updateBookCollections = useCallback(async () => {\n    /**\n     * Method of updating state variable with current boocks collection\n     */\n    const ordBooks = await getAllBooks();\n    setOrderedBooks(ordBooks);\n  }, []);\n\n  useEffect(() => {\n    /**\n     * Get initial data and update state variable\n     */\n    updateBookCollections();\n  }, [updateBookCollections]);\n\n  const onShelfChange = useCallback(async (e, book) => {\n    /**\n     * Send update to Back-end\n     * get up-tp-date book collection\n     */\n    const value = e.target.value;\n    await update(book, value);\n    await updateBookCollections();\n  }, [updateBookCollections])\n\n\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-content\">\n        <div>\n          <BookShelf\n            title=\"Currently Reading\"\n            books={orderedBooks.currentlyReading || []}\n            onShelfChange={onShelfChange}\n          />\n\n          <BookShelf\n            title=\"Want to Read\"\n            books={orderedBooks.wantToRead || []}\n            onShelfChange={onShelfChange}\n          />\n\n          <BookShelf\n            title=\"Read\"\n            books={orderedBooks.read || []}\n            onShelfChange={onShelfChange}\n          />\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <Link\n          to=\"/search\"\n        >\n          Add a Book\n        </Link>\n      </div>\n    </div>\n\n  )\n}\n\nexport default Home;\n","/**\n * Search component from the library\n * User can add books to his library\n */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { getAll, search, update } from '../../BooksAPI';\nimport Book from '../BookComponent';\n\n\nconst updateResultSearch = async (result) => {\n  /**\n   * Update the search results with the books in the user collection\n   */\n  let updated = result;\n  const shelves = await getAll();\n  shelves.forEach((book, index) => {\n    result.forEach((rowBook, index2) => {\n      if (rowBook.id === book.id) updated[index2] = shelves[index];\n    })\n  });\n  return updated;\n}\n\nconst Search = () => {\n  const [query, setQuery] = useState('');\n  const [result, setResult] = useState([]);\n\n\n  useEffect(() => {\n    /**\n     * Get search results whenever user enter new search term\n     */\n    const getSearchResults = async (query) => {\n      if (query) {\n        const result = await search(query);\n        if (result.error) {\n          setResult([]);\n          return;\n        }\n        let updated = await updateResultSearch(result);\n        setResult(updated);\n      } else {\n        setResult([]);\n      }\n    }\n    getSearchResults(query)\n  }, [query])\n\n  const onUserInput = useCallback(async (e) => {\n    /**\n     * Update query state variable as user hits a stroke\n     */\n    setQuery(e.target.value);\n  }, []);\n\n  const onShelfChange = useCallback(async (e, book, index) => {\n    /**\n     * Send user update to back-end\n     * update current search results to reflect user change\n     */\n    const value = e.target.value;\n    await update(book, value);\n    setResult((prevResult) => {\n      const updatedResult = [...prevResult]\n      updatedResult[index].shelf = value;\n      return updatedResult;\n    });\n  }, []);\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            onChange={onUserInput}\n          />\n\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {\n            result\n            && result.map((book, index) => {\n              return <Book key={book.id} book={book} onShelfChange={onShelfChange} index={index} />\n            })\n          }\n        </ol>\n      </div>\n      <div className=\"open-search\">\n        <Link\n          to=\"/\"\n        >\n          Back to Main Page\n        </Link>\n      </div>\n    </div>)\n}\n\nexport default Search;\n","import { Route, Switch } from 'react-router-dom';\nimport Footer from './Components/FooterComponent';\nimport Header from './Components/HeaderComponent';\nimport Home from './Components/HomeComponent';\nimport Search from './Components/SearchComponent';\n\nconst Page = () => {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/search\" component={Search} />\n      </Switch>\n      <Footer />\n    </>\n  )\n}\n\nexport default Page;\n","import { BrowserRouter as Router } from 'react-router-dom';\nimport Page from './Page';\nimport './App.css';\n\nconst App = () => {\n  return (\n    <Router>\n      <Page />\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}