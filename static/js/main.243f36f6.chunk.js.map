{"version":3,"sources":["Components/FooterComponent/index.tsx","Components/HeaderComponent/index.tsx","Components/BookComponent/index.tsx","Components/BookShelf/index.tsx","BooksAPI.js","Components/HomeComponent/index.tsx","Components/SearchComponent/index.tsx","Page.js","App.tsx","reportWebVitals.js","index.js"],"names":["Footer","className","target","rel","href","Header","Book","props","book","onShelfChange","index","shelf","imageLinks","title","authors","style","width","height","backgroundImage","smallThumbnail","value","onChange","e","disabled","map","author","Shelf","books","id","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","update","method","body","JSON","stringify","search","query","getAllBooks","a","orderedBooks","currentlyReading","filter","wantToRead","read","initialOrderedBook","Home","useState","setOrderedBooks","updateBookCollections","useCallback","ordBooks","useEffect","BookShelf","to","searchTerms","updateResultSearch","result","updated","shelves","forEach","rowBook","index2","Search","setQuery","setResult","didCancel","Array","isArray","getSearchResults","onUserInput","undefined","prevResult","updatedResult","type","placeholder","length","term","Page","exact","from","path","component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.243f36f6.chunk.js","sourcesContent":["/**\n * Footer component\n * It represents static footer with a link to project repository\n */\n\n\nconst Footer: () => JSX.Element = () => {\n  return (\n    <div className=\"footer\">\n      <small>\n        Full Source Code of This Project Con be found at {' '}\n        <a\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          href=\"https://github.com/ahmedalima/my-reads-a-book-tracking-app\">\n          Here\n        </a>\n      </small>\n    </div>\n  );\n}\n\nexport default Footer;\n","/**\n * Header component\n * It represents static header with title\n */\n\nconst Header: () => JSX.Element = () => {\n  return (\n    <div className=\"list-books\">\n      <div className=\"list-books-title\">\n        <h1>MyReads</h1>\n      </div>\n    </div>\n  )\n}\n\nexport default Header;\n","/**\n * Book Static component\n * It displays a book details\n */\n\nimport { ChangeEvent, ReactNode } from 'react';\nimport { BookPropsTypes } from '../types/type';\n\nconst Book: (props: BookPropsTypes & { children?: ReactNode }) => JSX.Element = (\n  props: BookPropsTypes & { children?: ReactNode }) => {\n  const {\n    book,\n    onShelfChange,\n    index,\n  } = props;\n\n  const {\n    shelf, imageLinks, title, authors,\n  } = book;\n\n  return (\n    <div className=\"book\">\n      <div className=\"book-top\">\n        <div className=\"book-cover\" style={{\n          width: 128,\n          height: 193,\n          backgroundImage: `url(\"${imageLinks && imageLinks.smallThumbnail}\")`\n        }}></div>\n        <div className=\"book-shelf-changer\">\n          <select value={shelf || 'none'} onChange={(e: ChangeEvent<HTMLSelectElement>) => onShelfChange(e, book, index)}>\n            <option value=\"move\" disabled>Move to...</option>\n            <option value=\"currentlyReading\">Currently Reading</option>\n            <option value=\"wantToRead\">Want to Read</option>\n            <option value=\"read\">Read</option>\n            <option value=\"none\">None</option>\n          </select>\n        </div>\n      </div>\n      <div className=\"book-title\">\n        {title}\n      </div>\n      {authors\n        && authors.map((author) => (\n          <div className=\"book-authors\" key={author}>\n            {author}\n          </div>\n        ))}\n    </div>)\n}\n\nexport default Book;\n","/**\n * Static BookShelf Component\n */\n// import PropTypes from 'prop-types';\nimport Book from '../BookComponent';\nimport { BookShelfPropsTypes } from '../types/type';\n\nconst Shelf: (props: BookShelfPropsTypes) => JSX.Element = (props: BookShelfPropsTypes) => {\n  const {\n    title, books, onShelfChange,\n  } = props;\n\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">\n        {title}\n      </h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">\n          {\n            books\n            && books.map((book, index: number) => (\n              <li key={book.id}>\n                <Book book={book} key={book.id} onShelfChange={onShelfChange} index={index} />\n              </li>))\n          }\n        </ol>\n      </div>\n    </div>)\n}\n\nexport default Shelf;\n\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","/**\n * Main Page Component\n * It Displays Different shelves of books\n * Each shelve contains a list of books\n * User can Change/remove any book from a shelve\n */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport BookShelf from '../BookShelf';\nimport {\n  getAll, update,\n} from '../../BooksAPI';\nimport { BookType, OnShelfChangeType, OrderedBooksType } from '../types/type';\n\nconst getAllBooks: () => Promise<OrderedBooksType> = async () => {\n  /**\n   * Get All User books from the back-end\n   * return => Object of properties:\n   *    currentlyReading: Array of Objects,\n   *       each object represents a book object with shelf property \"currentlyReading\"\n   *    wantToRead: Array of Object,\n   *       each object represents a book object with shelf property \"wantToRead\"\n   *    read: Array of Object,\n   *       each object represents a book object with shelf property \"read\"\n   */\n\n  const books: BookType[] = await getAll();\n  const orderedBooks = {\n    currentlyReading: books.filter((book: BookType) => book.shelf === 'currentlyReading'),\n    wantToRead: books.filter((book: BookType) => book.shelf === 'wantToRead'),\n    read: books.filter((book: BookType) => book.shelf === 'read')\n  };\n  return orderedBooks;\n}\n\n\nconst initialOrderedBook: OrderedBooksType = {\n  wantToRead: [],\n  read: [],\n  currentlyReading: [],\n};\n\nconst Home: () => JSX.Element = () => {\n  const [orderedBooks, setOrderedBooks] = useState<OrderedBooksType>(initialOrderedBook);\n\n  const updateBookCollections: () => Promise<void> = useCallback(async () => {\n    /**\n     * Method of updating state variable with current books collection\n     */\n    const ordBooks = await getAllBooks();\n    setOrderedBooks(ordBooks);\n  }, []);\n\n  useEffect(() => {\n    /**\n     * Get initial data and update state variable\n     */\n    updateBookCollections();\n  }, [updateBookCollections]);\n\n  const onShelfChange: OnShelfChangeType = useCallback(async (e, book) => {\n    /**\n     * Send update to Back-end\n     * get up-tp-date book collection\n     */\n    const value: string = e.target.value;\n    await update(book, value);\n    await updateBookCollections();\n  }, [updateBookCollections]);\n\n\n  return (\n    <div className=\"list-books\" >\n      <div className=\"list-books-content\" >\n        <div>\n          <BookShelf\n            title=\"Currently Reading\"\n            books={orderedBooks.currentlyReading}\n            onShelfChange={onShelfChange}\n          />\n\n          <BookShelf\n            title=\"Want to Read\"\n            books={orderedBooks.wantToRead}\n            onShelfChange={onShelfChange}\n          />\n\n          <BookShelf\n            title=\"Read\"\n            books={orderedBooks.read}\n            onShelfChange={onShelfChange}\n          />\n        </div>\n      </div>\n      <div className=\"open-search\">\n        <Link\n          to=\"/search\"\n        >\n          Add a Book\n        </Link>\n      </div>\n    </div>)\n}\n\nexport default Home;\n","/**\n * Search component from the library\n * User can add books to his library\n */\n\nimport {\n  ChangeEvent,\n  useCallback, useEffect, useState,\n} from 'react';\nimport { Link } from 'react-router-dom';\nimport { getAll, search, update } from '../../BooksAPI';\nimport Book from '../BookComponent';\nimport { BookType, OnShelfChangeType, SearchResultType, ShelfType } from '../types/type';\n\n\nconst searchTerms: string[] = ['Android', 'Art', 'Artificial Intelligence', 'Astronomy', 'Austen', 'Baseball', 'Basketball', 'Bhagat', 'Biography', 'Brief', 'Business', 'Camus', 'Cervantes', 'Christie', 'Classics', 'Comics', 'Cook', 'Cricket', 'Cycling', 'Desai', 'Design', 'Development', 'Digital Marketing', 'Drama', 'Drawing', 'Dumas', 'Education', 'Everything', 'Fantasy', 'Film', 'Finance', 'First', 'Fitness', 'Football', 'Future', 'Games', 'Gandhi', 'Homer', 'Horror', 'Hugo', 'Ibsen', 'Journey', 'Kafka', 'King', 'Lahiri', 'Larsson', 'Learn', 'Literary Fiction', 'Make', 'Manage', 'Marquez', 'Money', 'Mystery', 'Negotiate', 'Painting', 'Philosophy', 'Photography', 'Poetry', 'Production', 'Programming', 'React', 'Redux', 'River', 'Robotics', 'Rowling', 'Satire', 'Science Fiction', 'Shakespeare', 'Singh', 'Swimming', 'Tale', 'Thrun', 'Time', 'Tolstoy', 'Travel', 'Ultimate', 'Virtual Reality', 'Web Development', 'iOS'\n];\n\nconst updateResultSearch: (result: BookType[]) => Promise<BookType[]> = async (result) => {\n  /**\n   * Update the search results with the books in the user collection\n   */\n  let updated: BookType[] = result;\n  const shelves = await getAll();\n  shelves.forEach((book: BookType, index: number) => {\n    result.forEach((rowBook: BookType, index2: number) => {\n      if (rowBook.id === book.id) updated[index2] = shelves[index];\n    })\n  });\n  return updated;\n}\n\nconst Search: () => JSX.Element = () => {\n  const [query, setQuery] = useState<string>('');\n  const [result, setResult] = useState<BookType[]>([]);\n\n\n  useEffect(() => {\n    /**\n     * Get search results whenever user enter new search term\n     */\n    let didCancel = false;\n\n    const getSearchResults = async (query: string) => {\n      if (query) {\n        const result: SearchResultType = await search(query);\n        if (!didCancel) {\n          if (Array.isArray(result)) {\n            let updated = await updateResultSearch(result);\n            setResult(updated);\n            return;\n          }\n          setResult([]);\n        }\n      } else {\n        setResult([]);\n      }\n    }\n    getSearchResults(query)\n    return () => { didCancel = true; }; // Remember if we start fetching something else\n  }, [query])\n\n  const onUserInput: (e: ChangeEvent<HTMLInputElement>) => Promise<void> = useCallback(async (e) => {\n    /**\n     * Update query state variable as user hits a stroke\n     */\n    setQuery(e.target.value || '');\n  }, []);\n\n  const onShelfChange: OnShelfChangeType = useCallback(async (e, book, index) => {\n    /**\n     * Send user update to back-end\n     * update current search results to reflect user change\n     */\n    const value: \"currentlyReading\" | \"read\" | \"wantToRead\" | 'none' = e.target.value as ShelfType;\n    await update(book, value);\n    if (index !== undefined) {\n      setResult((prevResult: BookType[]) => {\n        const updatedResult: BookType[] = [...prevResult]\n        updatedResult[index].shelf = value;\n        return updatedResult;\n      });\n    }\n  }, []);\n\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <div className=\"search-books-input-wrapper\">\n          <input\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n            onChange={onUserInput}\n          />\n\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {\n            result && result.length > 0\n              ? result.map((book: BookType, index: number) => {\n                return <Book key={book.id} book={book} onShelfChange={onShelfChange} index={index} />\n              })\n              : (<>\n                <h1>\n                  No search result! What about searching for one of the following terms?\n                </h1>\n                <div className=\"break\"></div>\n                {searchTerms.map((term: string) => <li key={term}>{term}</li>)}\n              </>\n              )\n          }\n        </ol>\n      </div>\n      <div className=\"open-search\">\n        <Link\n          to=\"/\"\n        >\n          Back to Main Page\n        </Link>\n      </div>\n    </div>)\n}\n\nexport default Search;\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport Footer from './Components/FooterComponent';\nimport Header from './Components/HeaderComponent';\nimport Home from './Components/HomeComponent';\nimport Search from './Components/SearchComponent';\n\nconst Page = () => {\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Redirect exact from=\"/my-reads-a-book-tracking-app\" to=\"/\" />\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/search\" component={Search} />\n      </Switch>\n      <Footer />\n    </>\n  )\n}\n\nexport default Page;\n","import { BrowserRouter as Router } from 'react-router-dom';\nimport Page from './Page';\nimport './App.css';\n\nconst App: () => JSX.Element = () => {\n  return (\n    <Router/*  basename=\"/my-reads-a-book-tracking-app\" */>\n      <Page />\n    </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}